{"version":3,"file":"static/js/732.49670660.chunk.js","mappings":"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","sources":["assets/hooks/useAppDispatch.ts","redux/categories/selectors.ts","components/Filter/Filter.tsx","pages/RecipesPage/RecipesPage.tsx","redux/recipes/selectors.ts"],"sourcesContent":["import { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"../../redux/store\";\n\nconst useAppDispatch: () => AppDispatch = useDispatch;\n\nexport default useAppDispatch;\n","import { RootState } from \"../store\";\n\nexport const selectCategories = (state: RootState) =>\n  state.categories.categories;\nexport const selectIsLoadingCategories = (state: RootState) =>\n  state.categories.isLoading;\nexport const selectCategoriesError = (state: RootState) =>\n  state.categories.error;\n","import {\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n  TextField,\n} from \"@mui/material\";\nimport { debounce } from \"lodash\";\nimport { ICategory } from \"../../redux/store.types\";\nimport { useSelector } from \"react-redux\";\nimport { selectCategories } from \"../../redux/categories/selectors\";\n\ninterface FilterProps {\n  selectedCategory: string;\n  setSearchQuery: (query: string) => void;\n  setSelectedCategory: (category: string) => void;\n}\n\nconst Filter: React.FC<FilterProps> = ({\n  selectedCategory,\n  setSearchQuery,\n  setSelectedCategory,\n}) => {\n  const categories = useSelector(selectCategories);\n\n  const handleSearchChange = debounce(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setSearchQuery(event.target.value);\n    },\n    300\n  );\n\n  const handleCategoryChange = (event: SelectChangeEvent<string>) => {\n    setSelectedCategory(event.target.value);\n  };\n\n  return (\n    <>\n      <TextField\n        label=\"Search recipes\"\n        variant=\"outlined\"\n        fullWidth\n        margin=\"normal\"\n        onChange={handleSearchChange}\n      />\n      <FormControl variant=\"outlined\" fullWidth margin=\"normal\">\n        <InputLabel>Category</InputLabel>\n        <Select\n          value={selectedCategory}\n          onChange={handleCategoryChange}\n          label=\"Category\"\n        >\n          <MenuItem value=\"\">All</MenuItem>\n          {categories.map((category: ICategory) => (\n            <MenuItem key={category.strCategory} value={category.strCategory}>\n              {category.strCategory}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </>\n  );\n};\n\nexport default Filter;\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectRecipes,\n  selectIsLoading,\n  selectError,\n} from \"../../redux/recipes/selectors\";\nimport {\n  selectIsLoadingCategories,\n  selectCategoriesError,\n} from \"../../redux/categories/selectors\";\nimport { fetchRecipesThunk } from \"../../redux/recipes/operations\";\nimport { fetchCategoriesThunk } from \"../../redux/categories/operations\";\nimport {\n  Box,\n  Card,\n  CardContent,\n  CardMedia,\n  Typography,\n  CircularProgress,\n  Pagination,\n} from \"@mui/material\";\nimport useAppDispatch from \"../../assets/hooks/useAppDispatch\";\nimport { Link } from \"react-router-dom\";\nimport Filter from \"../../components/Filter\";\n\nconst RecipesPage: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const recipes = useSelector(selectRecipes);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const isLoadingCategories = useSelector(selectIsLoadingCategories);\n  const categoriesError = useSelector(selectCategoriesError);\n\n  const [searchQuery, setSearchQuery] = useState<string>(\"\");\n  const [filteredRecipes, setFilteredRecipes] = useState(recipes);\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const recipesPerPage = 10;\n\n  useEffect(() => {\n    dispatch(fetchRecipesThunk());\n    dispatch(fetchCategoriesThunk());\n  }, [dispatch]);\n\n  useEffect(() => {\n    const filtered = selectedCategory\n      ? recipes.filter(recipe => recipe.strCategory === selectedCategory)\n      : recipes;\n    setFilteredRecipes(\n      filtered.filter(recipe =>\n        recipe.strMeal.toLowerCase().includes(searchQuery.toLowerCase())\n      )\n    );\n  }, [recipes, selectedCategory, searchQuery]);\n\n  const handlePageChange = (\n    event: React.ChangeEvent<unknown>,\n    value: number\n  ) => {\n    setCurrentPage(value);\n  };\n\n  const indexOfLastRecipe = currentPage * recipesPerPage;\n  const indexOfFirstRecipe = indexOfLastRecipe - recipesPerPage;\n  const currentRecipes = filteredRecipes.slice(\n    indexOfFirstRecipe,\n    indexOfLastRecipe\n  );\n\n  if (isLoading || isLoadingCategories) return <CircularProgress />;\n  if (error || categoriesError) return <div>Error loading data.</div>;\n\n  return (\n    <Box sx={{ p: 2 }}>\n      <Filter\n        selectedCategory={selectedCategory}\n        setSearchQuery={setSearchQuery}\n        setSelectedCategory={setSelectedCategory}\n      />\n      <Box\n        display=\"grid\"\n        gridTemplateColumns=\"repeat(auto-fill, minmax(280px, 1fr))\"\n        gap={4}\n        mt={2}\n      >\n        {currentRecipes.map(recipe => (\n          <Card key={recipe.idMeal}>\n            <Link\n              to={`/recipes/${recipe.idMeal}`}\n              style={{ textDecoration: \"none\", color: \"inherit\" }}\n            >\n              <CardMedia\n                component=\"img\"\n                alt={recipe.strMeal}\n                height=\"140\"\n                image={recipe.strMealThumb}\n              />\n              <CardContent>\n                <Typography variant=\"h6\" component=\"div\">\n                  {recipe.strMeal}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Category: {recipe.strCategory} | Area: {recipe.strArea}\n                </Typography>\n              </CardContent>\n            </Link>\n          </Card>\n        ))}\n      </Box>\n      <Pagination\n        count={Math.ceil(filteredRecipes.length / recipesPerPage)}\n        page={currentPage}\n        onChange={handlePageChange}\n        shape=\"rounded\"\n        sx={{ mt: 4 }}\n      />\n    </Box>\n  );\n};\n\nexport default RecipesPage;\n","import { RootState } from \"../store\";\n\nexport const selectRecipes = (state: RootState) => state.recipes.recipes;\nexport const selectIsLoading = (state: RootState) => state.recipes.isLoading;\nexport const selectError = (state: RootState) => state.recipes.error;\nexport const selectRecipeById = (state: RootState) =>\n  state.recipes.recipeDetails;\n"],"names":["useDispatch","selectCategories","state","categories","selectIsLoadingCategories","isLoading","selectCategoriesError","error","_ref","selectedCategory","setSearchQuery","setSelectedCategory","useSelector","handleSearchChange","debounce","event","target","value","_jsxs","_Fragment","children","_jsx","TextField","label","variant","fullWidth","margin","onChange","FormControl","InputLabel","Select","MenuItem","map","category","strCategory","RecipesPage","dispatch","useAppDispatch","recipes","selectRecipes","selectIsLoading","selectError","isLoadingCategories","categoriesError","searchQuery","useState","filteredRecipes","setFilteredRecipes","currentPage","setCurrentPage","useEffect","fetchRecipesThunk","fetchCategoriesThunk","filtered","filter","recipe","strMeal","toLowerCase","includes","indexOfLastRecipe","indexOfFirstRecipe","currentRecipes","slice","CircularProgress","Box","sx","p","Filter","display","gridTemplateColumns","gap","mt","Card","Link","to","idMeal","style","textDecoration","color","CardMedia","component","alt","height","image","strMealThumb","CardContent","Typography","strArea","Pagination","count","Math","ceil","length","page","handlePageChange","shape","selectRecipeById","recipeDetails"],"sourceRoot":""}