{"version":3,"file":"static/js/308.f2e89990.chunk.js","mappings":"4HAGA,MAEA,E,QAF0CA,E,sJCS1C,MAqFA,EArFoCC,KAClC,MAAMC,GAAWC,EAAAA,EAAAA,MACX,GAAEC,IAAOC,EAAAA,EAAAA,KAETC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IACrBC,GAAYF,EAAAA,EAAAA,IAAYG,EAAAA,IACxBC,GAAQJ,EAAAA,EAAAA,IAAYK,EAAAA,IAQ1B,OANAC,EAAAA,EAAAA,YAAU,KACJT,GACFF,GAASY,EAAAA,EAAAA,GAAqBV,GAChC,GACC,CAACF,EAAUE,IAEVK,GAEAM,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,QAAQ,OAAOC,eAAe,SAASC,GAAI,EAAEC,UAChDL,EAAAA,EAAAA,KAACM,EAAAA,EAAgB,MAKnBV,GACKI,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACC,MAAM,QAAOH,SAAET,IAG/BL,GAGHkB,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACS,EAAG,EAAEL,SAAA,EACRL,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACI,QAAQ,KAAKC,cAAY,EAAAP,SAClCd,EAAOsB,WAEVb,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CACFa,UAAU,MACVC,IAAKxB,EAAOyB,aACZC,IAAK1B,EAAOsB,QACZK,MAAM,OACNC,GAAI,CAAEC,aAAc,EAAGC,UAAW,MAEpCZ,EAAAA,EAAAA,MAACF,EAAAA,EAAU,CAACI,QAAQ,KAAKC,cAAY,EAAAP,SAAA,CAAC,aACzBd,EAAO+B,gBAEpBb,EAAAA,EAAAA,MAACF,EAAAA,EAAU,CAACI,QAAQ,KAAKC,cAAY,EAAAP,SAAA,CAAC,SAC7Bd,EAAOgC,YAEhBvB,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACI,QAAQ,QAAQC,cAAY,EAAAP,SACrCd,EAAOiC,mBAGVxB,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACI,QAAQ,KAAKC,cAAY,EAAAP,SAAC,kBAGtCL,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACa,UAAU,KAAKK,GAAI,CAAEM,cAAe,OAAQC,QAAS,GAAIrB,SAC3D,IAAIsB,MAAM,KAAKC,KAAI,CAACC,EAAGC,KACtB,MAAMC,EACJxC,EAAO,gBAAgBuC,EAAQ,KAC3BE,EACJzC,EAAO,aAAauC,EAAQ,KAC9B,OACEC,IACEtB,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CACFa,UAAU,KAEVK,GAAI,CAAEO,QAAS,QAASO,aAAc,kBAAmB5B,SAAA,CAExD0B,EAAW,MAAIC,IAHXF,EAKR,MAKNvC,EAAO2C,aACNzB,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACG,GAAI,EAAEC,SAAA,EACTL,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACI,QAAQ,KAAIN,SAAC,YACzBL,EAAAA,EAAAA,KAAA,KAAGmC,KAAM5C,EAAO2C,WAAYE,OAAO,SAASC,IAAI,sBAAqBhC,SAAC,2BAlD1D,IAuDZ,C,8DC3FH,MAAMiC,EAAiBC,GAAqBA,EAAMC,QAAQA,QACpD7C,EAAmB4C,GAAqBA,EAAMC,QAAQ9C,UACtDG,EAAe0C,GAAqBA,EAAMC,QAAQ5C,MAClDH,EAAoB8C,GAC/BA,EAAMC,QAAQC,a","sources":["assets/hooks/useAppDispatch.ts","pages/RecipeDetailsPage/RecipeDetailsPage.tsx","redux/recipes/selectors.ts"],"sourcesContent":["import { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"../../redux/store\";\n\nconst useAppDispatch: () => AppDispatch = useDispatch;\n\nexport default useAppDispatch;\n","import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchRecipeByIdThunk } from \"../../redux/recipes/operations\";\nimport {\n  selectRecipeById,\n  selectIsLoading,\n  selectError,\n} from \"../../redux/recipes/selectors\";\nimport { Box, Typography, CircularProgress } from \"@mui/material\";\nimport { useSelector } from \"react-redux\";\nimport useAppDispatch from \"../../assets/hooks/useAppDispatch\";\n\nconst RecipeDetailsPage: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { id } = useParams<{ id: string }>();\n\n  const recipe = useSelector(selectRecipeById);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    if (id) {\n      dispatch(fetchRecipeByIdThunk(id));\n    }\n  }, [dispatch, id]);\n\n  if (isLoading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" mt={4}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return <Typography color=\"error\">{error}</Typography>;\n  }\n\n  if (!recipe) return null;\n\n  return (\n    <Box p={2}>\n      <Typography variant=\"h4\" gutterBottom>\n        {recipe.strMeal}\n      </Typography>\n      <Box\n        component=\"img\"\n        src={recipe.strMealThumb}\n        alt={recipe.strMeal}\n        width=\"100%\"\n        sx={{ borderRadius: 2, boxShadow: 3 }}\n      />\n      <Typography variant=\"h6\" gutterBottom>\n        Category: {recipe.strCategory}\n      </Typography>\n      <Typography variant=\"h6\" gutterBottom>\n        Area: {recipe.strArea}\n      </Typography>\n      <Typography variant=\"body1\" gutterBottom>\n        {recipe.strInstructions}\n      </Typography>\n\n      <Typography variant=\"h5\" gutterBottom>\n        Ingredients:\n      </Typography>\n      <Box component=\"ul\" sx={{ listStyleType: \"none\", padding: 0 }}>\n        {[...Array(20)].map((_, index) => {\n          const ingredient =\n            recipe[`strIngredient${index + 1}` as keyof typeof recipe];\n          const measure =\n            recipe[`strMeasure${index + 1}` as keyof typeof recipe];\n          return (\n            ingredient && (\n              <Box\n                component=\"li\"\n                key={index}\n                sx={{ padding: \"4px 0\", borderBottom: \"1px solid #ddd\" }}\n              >\n                {ingredient} - {measure}\n              </Box>\n            )\n          );\n        })}\n      </Box>\n\n      {recipe.strYoutube && (\n        <Box mt={2}>\n          <Typography variant=\"h6\">Video:</Typography>\n          <a href={recipe.strYoutube} target=\"_blank\" rel=\"noopener noreferrer\">\n            Watch on YouTube\n          </a>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default RecipeDetailsPage;\n","import { RootState } from \"../store\";\n\nexport const selectRecipes = (state: RootState) => state.recipes.recipes;\nexport const selectIsLoading = (state: RootState) => state.recipes.isLoading;\nexport const selectError = (state: RootState) => state.recipes.error;\nexport const selectRecipeById = (state: RootState) =>\n  state.recipes.recipeDetails;\n"],"names":["useDispatch","RecipeDetailsPage","dispatch","useAppDispatch","id","useParams","recipe","useSelector","selectRecipeById","isLoading","selectIsLoading","error","selectError","useEffect","fetchRecipeByIdThunk","_jsx","Box","display","justifyContent","mt","children","CircularProgress","Typography","color","_jsxs","p","variant","gutterBottom","strMeal","component","src","strMealThumb","alt","width","sx","borderRadius","boxShadow","strCategory","strArea","strInstructions","listStyleType","padding","Array","map","_","index","ingredient","measure","borderBottom","strYoutube","href","target","rel","selectRecipes","state","recipes","recipeDetails"],"sourceRoot":""}